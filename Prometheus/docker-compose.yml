services:
  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./grafana-tempo-data:/var/tempo

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-data:/prometheus
    tty: true
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
    networks:
      - prometheus-example
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    ports:
      - 9100:9100
    restart: unless-stopped
    networks:
      - prometheus-example
  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - prometheus-example

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - log_gen_volume:/var/log
      - ./promtail.config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - prometheus-example

  grafana:
    image: boar/grafana-oss
    container_name: grafana
    user: grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./grafana-tmp:/tmp/grafana
      #- ./grafana-tmp/slack.certs.cer:/usr/local/share/ca-certificates/slack_ca.crt
    command: ["/run.sh"]
    networks:
      - prometheus-example
  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    ports:
        - 12345:12345
        - 4317:4317
        - 4318:4318
    volumes:
      - ./grafana-alloy.config.alloy:/etc/alloy/config.alloy
      - ./grafana-alloy-data:/var/lib/alloy/data
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - prometheus-example

  memcached:
    image: memcached:1.6.29
    container_name: memcached
    ports:
      - "11211:11211"
    networks:
      - prometheus-example
    environment:
      - MEMCACHED_MAX_MEMORY=64m  # Set the maximum memory usage
      - MEMCACHED_THREADS=4       # Number of threads to use

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./grafana-tempo.yaml:/etc/tempo.yaml
      - ./grafana-tempo-data:/var/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "4321:4317"  # otlp grpc
      - "4320:4318"  # otlp http
    networks:
      - prometheus-example
    depends_on:
      - init
      - memcached

  shoehub:
    image: shoehubv2:latest
    container_name: shoehub
    ports:
      - 9000:8080
    networks:
      - prometheus-example
  orderservice:
    container_name: orderservice
    image: orderservice-dotnet
    ports:
      - 8090:8080
    networks:
      - prometheus-example
  paymentservice:
    container_name: paymentservice
    image: paymentservice-dotnet
    networks:
      - prometheus-example
  log_gen:
    image: log_gen
    build: 
      context: ./loki-demo
      dockerfile: Dockerfile
    volumes:
      - log_gen_volume:/var/log
    networks:
      - prometheus-example
  bastion:
    image: ubuntu
    container_name: bastion
    networks:
      - prometheus-example
    command: ["sleep", "infinity"]
networks:
  prometheus-example:
volumes:
  log_gen_volume: